#!/bin/bash
# Script para verificar se todas as vari√°veis de ambiente necess√°rias est√£o configuradas

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Verificando configura√ß√µes de ambiente para o PetApp Backend${NC}"

# Vari√°veis obrigat√≥rias
REQUIRED_VARS=(
  "DATABASE_URL"
  "JWT_SECRET"
  "PORT"
  "NODE_ENV"
)

# Vari√°veis opcionais mas importantes
RECOMMENDED_VARS=(
  "FIREBASE_SERVICE_ACCOUNT_PATH"
  "GOOGLE_API_KEY"
  "GEMINI_API_KEY"
  "OPENAI_API_KEY"
)

ENV_FILE=".env.production"

# Verificar se o arquivo .env.production existe
if [ ! -f "$ENV_FILE" ]; then
  echo -e "${RED}Arquivo $ENV_FILE n√£o encontrado!${NC}"
  echo -e "Por favor, crie o arquivo $ENV_FILE com as configura√ß√µes de produ√ß√£o."
  exit 1
fi

# Verificar vari√°veis obrigat√≥rias
echo -e "${YELLOW}Verificando vari√°veis obrigat√≥rias:${NC}"
MISSING_REQUIRED=0

for var in "${REQUIRED_VARS[@]}"; do
  if grep -q "^$var=" "$ENV_FILE"; then
    echo -e "‚úÖ $var: ${GREEN}Configurado${NC}"
  else
    echo -e "‚ùå $var: ${RED}N√ÉO CONFIGURADO${NC}"
    MISSING_REQUIRED=$((MISSING_REQUIRED+1))
  fi
done

# Verificar vari√°veis recomendadas
echo -e "\n${YELLOW}Verificando vari√°veis recomendadas:${NC}"
MISSING_RECOMMENDED=0

for var in "${RECOMMENDED_VARS[@]}"; do
  if grep -q "^$var=" "$ENV_FILE"; then
    echo -e "‚úÖ $var: ${GREEN}Configurado${NC}"
  else
    echo -e "‚ö†Ô∏è $var: ${YELLOW}N√ÉO CONFIGURADO${NC}"
    MISSING_RECOMMENDED=$((MISSING_RECOMMENDED+1))
  fi
done

# Verificar se o Docker est√° instalado
echo -e "\n${YELLOW}Verificando pr√©-requisitos do sistema:${NC}"
if command -v docker &> /dev/null; then
  DOCKER_VERSION=$(docker --version)
  echo -e "‚úÖ Docker: ${GREEN}Instalado${NC} - $DOCKER_VERSION"
else
  echo -e "‚ùå Docker: ${RED}N√ÉO INSTALADO${NC}"
fi

if command -v docker-compose &> /dev/null; then
  COMPOSE_VERSION=$(docker-compose --version)
  echo -e "‚úÖ Docker Compose: ${GREEN}Instalado${NC} - $COMPOSE_VERSION"
else
  echo -e "‚ùå Docker Compose: ${RED}N√ÉO INSTALADO${NC}"
fi

# Verificar arquivos de credenciais
echo -e "\n${YELLOW}Verificando arquivos de credenciais:${NC}"
if [ -f "./credentials/firebase-service-account.json" ]; then
  echo -e "‚úÖ Firebase Service Account: ${GREEN}Encontrado${NC}"
else
  echo -e "‚ùå Firebase Service Account: ${RED}N√ÉO ENCONTRADO${NC}"
  MISSING_RECOMMENDED=$((MISSING_RECOMMENDED+1))
fi

if [ -f "./credentials/google-cloud-vision.json" ]; then
  echo -e "‚úÖ Google Cloud Vision: ${GREEN}Encontrado${NC}"
else
  echo -e "‚ö†Ô∏è Google Cloud Vision: ${YELLOW}N√ÉO ENCONTRADO${NC}"
fi

# Resumo
echo -e "\n${YELLOW}Resumo da verifica√ß√£o:${NC}"
if [ $MISSING_REQUIRED -eq 0 ]; then
  echo -e "‚úÖ ${GREEN}Todas as vari√°veis obrigat√≥rias est√£o configuradas.${NC}"
else
  echo -e "‚ùå ${RED}$MISSING_REQUIRED vari√°veis obrigat√≥rias est√£o faltando!${NC}"
fi

if [ $MISSING_RECOMMENDED -eq 0 ]; then
  echo -e "‚úÖ ${GREEN}Todas as vari√°veis recomendadas est√£o configuradas.${NC}"
else
  echo -e "‚ö†Ô∏è ${YELLOW}$MISSING_RECOMMENDED vari√°veis/arquivos recomendados est√£o faltando.${NC}"
fi

# Conclus√£o
if [ $MISSING_REQUIRED -eq 0 ]; then
  echo -e "\n${GREEN}O ambiente est√° pronto para build e deploy! üöÄ${NC}"
  if [ $MISSING_RECOMMENDED -gt 0 ]; then
    echo -e "${YELLOW}Mas algumas configura√ß√µes recomendadas est√£o faltando.${NC}"
  fi
else
  echo -e "\n${RED}O ambiente N√ÉO est√° pronto para deploy.${NC}"
  echo -e "${RED}Por favor, configure as vari√°veis obrigat√≥rias faltantes.${NC}"
  exit 1
fi
